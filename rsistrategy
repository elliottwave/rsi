# Disclaimer: This algorithm is a proof of concept and exemplifies the
# mechanics of creating a strategy based on certain indicators, candle
# patterns, and/or statistical models. This strategy is currently a work
# in progress and we recommend varying the parameters of this strategy
# and/or building on top of it before deploying it to the live markets
# (you should always ensure that backtests indicate a profitable strategy
# before deploying any strategy live).

# youtube: biSv6994rpY


"""
## Strategy summary:

This strategy computes the `RSI` and buys when:

`RSI < RSI_BUY_THRESH` (specified above)

and sells when:

`RSI > RSI_SELL_THRESH` (specified above)

https://en.wikipedia.org/wiki/Relative_strength_index

"""


# Imports
import pandas as pd
import numpy as np
from cryzen import plot, param
import talib.stream as ta


# Exchange, symbol to trade, and starting capital
EXCHANGE_NAME  = param('crix', type='dropdown', values='crix')
SYMBOL_NAME    = param("eth_btc", type='dropdown', values=['ltc_btc', 'eth_btc', 'xrp_btc', 'xlm_btc', 'bch_btc'])
CAPITAL_BASE   = param(1, type='num', values=[0.1,.1,10]) # Units in `QUOTE_CURRENCY` below
QUOTE_CURRENCY = 'btc'


# Trading frequency, and time range to backtest over
# choices: 'minute', or 'daily'
DATA_FREQUENCY = param('daily', type='dropdown', values=['daily'])
BACKTESTING_RANGE = param("2019 - partial", type='dropdown', values=['2018 - all', '2019 - partial'])


# Map BACKTESTING_RANGE to actual start and end times
if BACKTESTING_RANGE == '2018 - all':
    # For 2018
    START_TIME = pd.to_datetime('2018-01-01', utc=True)
    END_TIME = pd.to_datetime('2018-12-31', utc=True)
elif BACKTESTING_RANGE == '2019 - partial':
    # For 2019
    START_TIME = pd.to_datetime('2019-01-01', utc=True)
    END_TIME = pd.to_datetime('2019-12-31', utc=True)


# Strategy Parameters
RSI_WINDOW      = param(60, type='num', values=[10,1,120])
RSI_BUY_THRESH  = param(35, type='num', values=[0,1,60])
RSI_SELL_THRESH = param(45, type='num', values=[0,1,60])


# Internal Parameters
BOUGHT = False


# `initialize` runs once before the start of a strategy
# (for both backtests and live deployments).
#
# `context` is a shared variable between the various
# functions in this script.
def initialize(context):
    # `context.asset` can be accessed from other
    # functions involved in this strategy such as `handle_data`
    # Feel free to define `context.anything = whatever`
    context.asset = symbol(SYMBOL_NAME)


# `handle_data` runs every time there is a new complete candle
# (contained in the `data` argument).
#
# If `DATA_FREQUENCY` above is set to 'minute', `handle_data` will
# get called at the end of every minute; if it is set to 'daily'
# it will get called at the end of every day (UTC time).
def handle_data(context, data):
    
    global BOUGHT
    
    # Get data
    historical_data = data.history(
        context.asset,
        bar_count=(RSI_WINDOW + 1),
        fields=['price', 'open', 'high', 'low', 'close', 'volume'],
        frequency='1D')

    # Compute RSI
    rsi = ta.RSI(historical_data.close.as_matrix(),
                 timeperiod=RSI_WINDOW)
    
    plot(context, rsi=rsi)
    
    # Buy & Sell
    if (not BOUGHT) and (rsi < RSI_BUY_THRESH):
        order_target_percent(context.asset, 1)
        BOUGHT = True
        
    if BOUGHT and (rsi > RSI_SELL_THRESH):
        order_target_percent(context.asset, 0)
        BOUGHT = False
    

# `analyze_live` runs on every iteration of a
# live algorithm (does not run for backtests).
def analyze_live(context, results):
    pass


# `analyze` runs at the end of a job
def analyze(context, results):
    print("Runs after job ends")
